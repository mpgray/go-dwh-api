// first, we create a configuration (i.e. a builder) for our logger

config := zap.NewProductionConfig()

// we configure the destination for our log, in this case, a file

config.OutputPaths = []string{"zap-demo.log"}


// we build the logger

zapLogger, err := config.Build()

// Go doesn't support exceptions, so we check for the error, exiting the application if needed

if err != nil {

  log.Fatalf("can't initialize zap logger: %v", err)

}




// flushes buffer, if any

defer zapLogger.Sync()




// we finally log our message at the INFO level

zapLogger.Info("This is our first log message using zap!")



// Example will start the
func Example() {
	fmt.Printf("\n*** Using the Example logger\n\n")

	logger := zap.NewExample()
	logger.Debug("This is a DEBUG message")
	logger.Info("This is an INFO message")
	logger.Info("This is an INFO message with fields", zap.String("region", "us-west"), zap.Int("id", 2))
	logger.Warn("This is a WARN message")
	logger.Error("This is an ERROR message")
	// logger.Fatal("This is a FATAL message")  // would exit if uncommented
	logger.DPanic("This is a DPANIC message")
	//logger.Panic("This is a PANIC message")   // would exit if uncommented

	fmt.Println()
}

func Development() {
	fmt.Printf("*** Using the Development logger\n\n")

	logger, _ := zap.NewDevelopment()
	logger.Debug("This is a DEBUG message")
	logger.Info("This is an INFO message")
	logger.Info("This is an INFO message with fields", zap.String("region", "us-west"), zap.Int("id", 2))
	logger.Warn("This is a WARN message")
	logger.Error("This is an ERROR message")
	// logger.Fatal("This is a FATAL message")   // would exit if uncommented
	// logger.DPanic("This is a DPANIC message") // would exit if uncommented
	//logger.Panic("This is a PANIC message")    // would exit if uncommented

	fmt.Println()
}

func Production() {
	fmt.Printf("*** Using the Production logger\n\n")

	logger, _ := zap.NewProduction()
	logger.Debug("This is a DEBUG message")
	logger.Info("This is an INFO message")
	logger.Info("This is an INFO message with fields", zap.String("region", "us-west"), zap.Int("id", 2))
	logger.Warn("This is a WARN message")
	logger.Error("This is an ERROR message")
	// logger.Fatal("This is a FATAL message")   // would exit if uncommented
	logger.DPanic("This is a DPANIC message")
	// logger.Panic("This is a PANIC message")   // would exit if uncommented

	fmt.Println()
}

func Sugar() {
	fmt.Printf("*** Using the Sugar logger\n\n")

	logger, _ = zap.NewDevelopment()
	slogger := logger.Sugar()
	slogger.Info("Info() uses sprint")
	slogger.Infof("Infof() uses %s", "sprintf")
	slogger.Infow("Infow() allows tags", "name", "Legolas", "type", 1)

	fmt.Println("*** Build a logger from a json ****")

	rawJSONConfig := []byte(`{
        "level": "info",
        "encoding": "console",
        "outputPaths": ["stdout", "/tmp/logs"],
        "errorOutputPaths": ["/tmp/errorlogs"],
        "initialFields": {"initFieldKey": "fieldValue"},
        "encoderConfig": {
          "messageKey": "message",
          "levelKey": "level",
          "nameKey": "logger",
          "timeKey": "time",
          "callerKey": "logger",
          "stacktraceKey": "stacktrace",
          "callstackKey": "callstack",
          "errorKey": "error",
          "timeEncoder": "iso8601",
          "fileKey": "file",
          "levelEncoder": "capitalColor",
          "durationEncoder": "second",
          "callerEncoder": "full",
          "nameEncoder": "full",
          "sampling": {
              "initial": "3",
              "thereafter": "10"
          }
        }
      }`)

	config := zap.Config{}
	if err := json.Unmarshal(rawJSONConfig, &config); err != nil {
		panic(err)
	}
	logger, err := config.Build()
	if err != nil {
		panic(err)
	}

	logger.Debug("This is a DEBUG message")
	logger.Info("This should have an ISO8601 based time stamp")
	logger.Warn("This is a WARN message")
	logger.Error("This is an ERROR message")
	//logger.Fatal("This is a FATAL message")   // would exit if uncommented
	//logger.DPanic("This is a DPANIC message") // would exit if uncommented

	const url = "http://example.com"
	logger.Info("Failed to fetch URL.",
		// Structured context as strongly typed fields.
		zap.String("url", url),
		zap.Int("attempt", 3),
		zap.Duration("backoff", time.Second))
	// {"level":"info","msg":"Failed to fetch URL.","url":"http://example.com","attempt":3,"backoff":"1"}
}